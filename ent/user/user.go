// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAccountName holds the string denoting the account_name field in the database.
	FieldAccountName = "account_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// EdgeTweet holds the string denoting the tweet edge name in mutations.
	EdgeTweet = "tweet"
	// EdgeGood holds the string denoting the good edge name in mutations.
	EdgeGood = "good"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// EdgeFollower holds the string denoting the follower edge name in mutations.
	EdgeFollower = "follower"
	// EdgeFollowed holds the string denoting the followed edge name in mutations.
	EdgeFollowed = "followed"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TweetTable is the table that holds the tweet relation/edge.
	TweetTable = "tweets"
	// TweetInverseTable is the table name for the Tweet entity.
	// It exists in this package in order to avoid circular dependency with the "tweet" package.
	TweetInverseTable = "tweets"
	// TweetColumn is the table column denoting the tweet relation/edge.
	TweetColumn = "user_id"
	// GoodTable is the table that holds the good relation/edge.
	GoodTable = "goods"
	// GoodInverseTable is the table name for the Good entity.
	// It exists in this package in order to avoid circular dependency with the "good" package.
	GoodInverseTable = "goods"
	// GoodColumn is the table column denoting the good relation/edge.
	GoodColumn = "user_id"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "comments"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "user_id"
	// FollowerTable is the table that holds the follower relation/edge.
	FollowerTable = "follows"
	// FollowerInverseTable is the table name for the Follow entity.
	// It exists in this package in order to avoid circular dependency with the "follow" package.
	FollowerInverseTable = "follows"
	// FollowerColumn is the table column denoting the follower relation/edge.
	FollowerColumn = "follower_id"
	// FollowedTable is the table that holds the followed relation/edge.
	FollowedTable = "follows"
	// FollowedInverseTable is the table name for the Follow entity.
	// It exists in this package in order to avoid circular dependency with the "follow" package.
	FollowedInverseTable = "follows"
	// FollowedColumn is the table column denoting the followed relation/edge.
	FollowedColumn = "followed_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAccountName,
	FieldEmail,
	FieldPassword,
	FieldAge,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
