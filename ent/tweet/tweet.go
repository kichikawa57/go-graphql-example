// Code generated by entc, DO NOT EDIT.

package tweet

import (
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/kichikawa/ent/schema/property"
)

const (
	// Label holds the string label denoting the tweet type in the database.
	Label = "tweet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeGoods holds the string denoting the goods edge name in mutations.
	EdgeGoods = "goods"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the tweet in the database.
	Table = "tweets"
	// GoodsTable is the table that holds the goods relation/edge.
	GoodsTable = "goods"
	// GoodsInverseTable is the table name for the Good entity.
	// It exists in this package in order to avoid circular dependency with the "good" package.
	GoodsInverseTable = "goods"
	// GoodsColumn is the table column denoting the goods relation/edge.
	GoodsColumn = "tweet_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "tweet_id"
)

// Columns holds all SQL columns for tweet fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldText,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tweets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type property.TweetType) error {
	switch _type {
	case "unpublic", "public":
		return nil
	default:
		return fmt.Errorf("tweet: invalid enum value for type field: %q", _type)
	}
}

var (
	// property.TweetType must implement graphql.Marshaler.
	_ graphql.Marshaler = property.TweetType("")
	// property.TweetType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*property.TweetType)(nil)
)
