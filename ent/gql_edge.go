// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (t *Tweet) Goods(ctx context.Context) ([]*Good, error) {
	result, err := t.Edges.GoodsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryGoods().All(ctx)
	}
	return result, err
}

func (t *Tweet) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := t.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryComments().All(ctx)
	}
	return result, err
}

func (u *User) Tweet(ctx context.Context) ([]*Tweet, error) {
	result, err := u.Edges.TweetOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTweet().All(ctx)
	}
	return result, err
}

func (u *User) Good(ctx context.Context) ([]*Good, error) {
	result, err := u.Edges.GoodOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryGood().All(ctx)
	}
	return result, err
}

func (u *User) Comment(ctx context.Context) ([]*Comment, error) {
	result, err := u.Edges.CommentOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryComment().All(ctx)
	}
	return result, err
}

func (u *User) Follower(ctx context.Context) ([]*Follow, error) {
	result, err := u.Edges.FollowerOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollower().All(ctx)
	}
	return result, err
}

func (u *User) Followed(ctx context.Context) ([]*Follow, error) {
	result, err := u.Edges.FollowedOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowed().All(ctx)
	}
	return result, err
}
